buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
  }
}

plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.22"
    id "org.sonarqube" version "2.6"
    id 'com.palantir.git-version' version '0.10.1'
}
def TEAM = 5493
def ROBOT_CLASS = "org.usfirst.frc.team5493.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Phoenix (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    compile openrio.powerup.matchData()
}



// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

sonarqube {
    def shortBranchName = versionDetails().branchName

    properties {
        property "sonar.host.url", 'http://sonarqube.io/'
        property "sonar.forceAnalysis", "true"
        property 'sonar.projectName', "[" + shortBranchName + "] " + rootProject.name
        property 'sonar.projectKey', "${sonarQubeProjectBaseKey}"
        property 'sonar.branch', shortBranchName
        property 'sonar.projectDescription', "[" + shortBranchName + "] " + rootProject.name
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}


apply plugin: "org.sonarqube"